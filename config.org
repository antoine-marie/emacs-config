#+TITLE: My emacs config
#+STARTUP: overview
* Intro
To create this config, I have mainly used this tutorial of [[https://www.youtube.com/watch?v=d6iY_1aMzeg&list=PLX2044Ew-UVVv31a0-Qn3dA6Sd_-NyA1n][Uncle Dave]].
I have also used pieces of other emacs config:
- [[https://github.com/daedreth/UncleDavesEmacs][https://github.com/daedreth/UncleDavesEmacs]]
- [[https://github.com/hieutkt/emacs-config][https://github.com/hieutkt/emacs-config]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][http://pages.sachachua.com/.emacs.d/Sacha.html]]
- https://github.com/daviwil/dotfiles/blob/master/Emacs.org

* Theme
Loading a nice looking theme
  #+begin_src emacs-lisp
        (use-package doom-themes
          :ensure t
          :config
          ;; Global settings (defaults)
          (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
                doom-themes-enable-italic t) ; if nil, italics is universally disabled
          (load-theme 'doom-challenger-deep t)  ;;other cool themes doom-acario-dark doom-challenger-deep doom-snazzy doom-gruvbox doom-molokai
          ;; old-themes doom-zenburn doom-material 

          ;; Enable flashing mode-line on errors
          (doom-themes-visual-bell-config)

          ;; Corrects (and improves) org-mode's native fontification.
          (doom-themes-org-config))
  #+end_src

* Good looking emacs
** General looking
Setting some general parameters
  #+begin_src emacs-lisp
    (tool-bar-mode -1) ;; removing useless bars
    (menu-bar-mode -1) 
    (scroll-bar-mode -1)
    (toggle-frame-maximized)
    (global-display-line-numbers-mode t)
    (setq inhibit-startup-message 't)
    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq
         split-width-threshold 0
         split-height-threshold nil) ;; vertical split by default
  #+end_src

  #+RESULTS:
** Monospace font
 #+begin_src emacs-lisp
      ;; Set default font
   (set-face-attribute 'default nil
                       :family "JetBrains Mono"
                       :height 160
                       :weight 'normal
                       :width 'normal)
  #+end_src

  #+RESULTS:

** Remove the annoying beeps of emacs
  #+begin_src emacs-lisp
    (setq ring-bell-function 'ignore)
  #+end_src
** Smooth scrolling
  #+begin_src emacs-lisp
  (setq scroll-conservatively 100)
  #+end_src
** Highlight indent package
Highlight the indents in the prog and TeX modes.
   #+begin_src emacs-lisp
     (use-package highlight-indent-guides
	    :ensure t
	    :hook (prog-mode . highlight-indent-guides-mode)
	    (TeX-mode . highlight-indent-guides-mode))
     (setq highlight-indent-guides-method 'column)
   #+end_src
** Easy bracket parentheses etc 
*** Rainbow-delimiters package
Each pairs of delimiters have a given color to make it easier to recognize pairs.
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :hook (prog-mode . rainbow-delimiters-mode)
             (TeX-mode . rainbow-delimiters-mode))
   #+end_src
*** electric-pair mode
Minor mode to write the closing delimiters when typing an opening one.
   #+begin_src emacs-lisp
     (electric-pair-mode 1)
     (add-hook 'LaTeX-mode-hook
               '(lambda ()
                 (define-key LaTeX-mode-map (kbd "$") 'self-insert-command)))
   #+end_src
*** highlight matching bracket
Highlight the matching delimiters when the cursor is on one of them.
    #+begin_src emacs-lisp
      (show-paren-mode 1)
      (setq show-paren-style 'parenthesis)
    #+end_src
** UTF-8 encoding
#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
** PDF tools
Use pdf-tools to read pdf within emacs
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    ;; :config (pdf-tools-install)
    :hook (pdf-view-mode . (lambda () (display-line-numbers-mode -1) (pdf-sync-minor-mode 1))))
#+end_src

** Diminish
Remove all the minor mode in the bottom bar
#+begin_src emacs-lisp
      (use-package diminish
        :ensure t
        :init
        (diminish 'which-key-mode)
        (diminish 'visual-line-mode)
        (diminish 'beacon-mode)
        (diminish 'rainbow-delimiters-mode)
;        (diminish 'flycheck-mode)
        (diminish 'company-mode))
#+end_src

* User friendly emacs
** Backups
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src
** Config shortcut
#+begin_src emacs-lisp
   (global-set-key (kbd "C-c e") (lambda() (interactive)(find-file "~/.emacs.d/config.org")))
#+end_src
** Easily find cursor
*** Highlight cursor line
  #+begin_src emacs-lisp
    (when window-system (global-hl-line-mode t))
  #+end_src  
*** Flashing cursor line (beacon package)
Make the cursor's line flash when switching window or buffer.
   #+begin_src emacs-lisp
     (use-package beacon
       :ensure t
       :init
       (beacon-mode 1))
   #+end_src
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
  :ensure t
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+end_src
** Browse kill ring
   #+begin_src emacs-lisp
               (use-package browse-kill-ring  ; List of previous copy/cut
                 :ensure t
                 :bind (("M-y" . browse-kill-ring)))
   #+end_src
** Avy package
Avy for fast moving to a character.

   #+begin_src emacs-lisp
     (use-package avy
     :ensure t)
     (global-set-key (kbd "C-:") 'avy-goto-char)
     (global-set-key (kbd "C-!") 'avy-goto-char-2)
   #+end_src

** recentf-mode
#+begin_src emacs-lisp
  (recentf-mode 1)
  (global-set-key (kbd "C-x r") 'recentf-open-files)
#+end_src
** saveplace mode
#+begin_src emacs-lisp
  (save-place-mode 1) ; Remember the place in the file last time you closed that buffer
#+end_src
** auto-revert mode
#+begin_src emacs-lisp
  (global-auto-revert-mode 1) ; Automatically update buffer when file changes on disk
#+end_src
** ivy
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :init (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)(setq lsp-tex-server 'digestif)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+end_src

** SOMEDAY Corfu
#    #+begin_src emacs-lisp
     
#    #+end_src

** SOMEDAY Vertico
#    #+begin_src emacs-lisp
#      (use-package vertico
#        :ensure t
#        :init
#        (vertico-mode))
#    #+end_src

#    #+RESULTS:
   
# ** Marginalia
#    #+begin_src emacs-lisp
#      (use-package marginalia
#        :after vertico
#        :ensure t
#        :custom
#        (marginalia-max-relative-age 0)
#        (marginalia-align 'right)
#        (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
#        :init
#        (marginalia-mode))
#    #+end_src

# ** Orderless
#    #+begin_src emacs-lisp
#      (use-package orderless
#        :ensure t
#        :custom
#        (completion-styles '(orderless)))
#    #+end_src

#    #+RESULTS:
#    : t

** Which-key package
Display all the possible commands if you forget the one that you want.
   #+begin_src emacs-lisp
     (use-package which-key
     :ensure t
     :init
     (which-key-mode))
   #+end_src

* Org mode
** General looking
*** Org bullets
   #+begin_src emacs-lisp
     (use-package org-bullets
       :ensure t
       :hook (org-mode . (lambda () (org-bullets-mode))))
   #+end_src
*** Indent mode
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook 'org-indent-mode)
    #+end_src
*** Do not show markers for italics, bold etc
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src
*** ... -> Drop down character
#+begin_src emacs-lisp
  (setq org-ellipsis " â–¾")
#+end_src
*** Font size of different headers
#+begin_src emacs-lisp
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1))))
#+end_src
** Fuzzy for link to file
#+begin_src emacs-lisp
  (setq org-link-search-must-match-exact-headline nil)
#+end_src
** Visual line mode
   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
   #+end_src
** Key binding for todo.org
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c t") (lambda() (interactive)(find-file "~/Dropbox/Org/todo.org")))
#+end_src
** Org TODO keywords and priorities
   #+begin_src emacs-lisp
     (setq org-todo-keywords
	   '(
	     (sequence "IDEA(i)" "TODO(t)" "WAITING(w)" "MEETING(m)" "|" "DONE(d)")
	     (sequence "|" "CANCELED(c)" "SOMEDAY(f)")
	     ))
     (setq org-highest-priority ?A)
	  (setq org-lowest-priority ?C)
	  (setq org-default-priority ?A)
	  (setq org-priority-faces '((?A . (:foreground "red" :weight bold))
				     (?B . (:foreground "orange" :weight bold))
				     (?C . (:foreground "yellow" :weight bold))))
   #+end_src

** TODO Org capture template
*** set key template
    #+begin_src emacs-lisp
      (define-key global-map (kbd "C-c c") 'org-capture)
    #+end_src
*** todo template
    #+begin_src emacs-lisp
      (setq org-capture-templates
            '(("t" "todo" entry (file+headline "~/Dropbox/Org/todo.org" "Tasks")
               "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n"  :prepend t :kill-buffer t)))
    #+end_src

*** idea template
    #+begin_src emacs-lisp
      (setq org-capture-templates
            '(("i" "Idea" entry (file+headline "~/Dropbox/Org/todo.org" "Task")
               "* IDEA %?\nAdded: %U\n" :prepend t :kill-buffer t)))
    #+end_src
    
** Org structure template
#+begin_src emacs-lisp
  (setq org-structure-template-alist
    '(("a" . "export ascii\n")
      ("c" . "center\n")
      ("C" . "comment\n")
      ("e" . "example\n")
      ("E" . "export")
      ("h" . "export html\n")
      ("l" . "export latex\n")
      ("q" . "quote\n")
      ("s" . "src")
      ("v" . "verse\n")
      ("el" . "src emacs-lisp\n"))) 
#+end_src

** Org tags list
#+begin_src emacs-lisp
  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("agenda" . ?a)
       ("planning" . ?p)
       ("email" . ?e)
       ("idea" . ?i)))
#+end_src
** Host local server with simple-httpd
#+begin_src emacs-lisp
  (use-package simple-httpd
    :ensure t)
#+end_src
* AucTeX
** auctex
   #+begin_src emacs-lisp
     (use-package auctex
       :ensure t
       :mode ("\\.tex\\'" . tex-mode)
       :mode ("\\.rty\\'" . tex-mode)
       :mode ("\\.bib\\'" . bibtex-mode)
       :init
       (setq TeX-master              nil
             TeX-auto-save		 t  ; enable autosave on during LaTeX-mode
             TeX-parse-self		 t  ; enable autoparsing
             TeX-PDF-mode		 t  ; to create pdf by default
             TeX-electric-escape	 t
             TeX-engine           'luatex)
       )
   #+end_src 
** auctex-latexmk
   #+begin_src emacs-lisp
     (use-package auctex-latexmk
       :ensure t
       :init
       (auctex-latexmk-setup)
       :config
       (setq auctex-latexmk-inherit-TeX-PDF-mode t)
       )
   #+end_src
** PDF updated and open in Evince EE
   #+begin_src emacs-lisp
     ;; to use pdfview with auctex
     (setq TeX-view-program-selection '((output-pdf "Evince"))
     TeX-source-correlate-start-server t) ;; not sure if last line is neccessary
     ;; to have the buffer refresh after compilation
     (add-hook 'TeX-after-compilation-finished-functions
	 #'TeX-revert-document-buffer)
     ;;correlate
     (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
   #+end_src
** flyspell
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'flyspell-mode) 
#+end_src
** reftex
#+begin_src emacs-lisp
  (use-package reftex
    :ensure t
    :config
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    ;; Reftex default bibfile
    (setq reftex-plug-into-AUCTeX t
          reftex-insert-label-flags '("s" t))
    )        
   #+end_src
** lsp-latex
#+begin_src emacs-lisp
  (use-package lsp-latex
    :ensure t
    :config
    (add-hook 'tex-mode-hook 'lsp)
    (add-hook 'latex-mode-hook 'lsp)
    )
  (setq lsp-tex-server 'digestif)
   #+end_src

   #+RESULTS:
   : digestif

** remove fontification
#+begin_src emacs-lisp
  (setq font-latex-fontify-script nil)
  (setq font-latex-fontify-sectioning 'color)       
#+end_src

* Magit
Great tutorial to learn the very basics of [[https://www.youtube.com/watch?v=vQO7F2Q9DwA][magit]]. A more advanced series of tutorial on [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oMc34dTjyFmTUWbXTKrNfZA][magit]].
** Magit package
Magit is a git porcelain for emacs.
Reference card for [[https://magit.vc/manual/magit-refcard.pdf][magit]].
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status)
    :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src
* Org roam
I learned how to use org roam thanks to the following [[https://www.youtube.com/watch?v=AyhPmypHDEw&list=PLEoMzSkcN8oN3x3XaZQ-AXFKv52LZzjqD][series of tutorial]].
There is also a complete tutorial on how to install the minimum configuration for org-roam-bibtex [[https://org-roam.discourse.group/t/minimum-configuration-of-org-roam-v2-org-roam-bibtex-for-spacemacs-users/1755][here]].
** Load package
#+begin_src emacs-lisp
      (use-package org-roam
        :ensure t
        :init
        (setq org-roam-v2-ack t)
        (setq org-roam-completion-everywhere t)
        :custom
        (org-roam-directory "~/BeepBoop/OrgRoam")
        :bind (("C-c n l" . org-roam-buffer-toggle)
               ("C-c n f" . org-roam-node-find)
               ("C-c n g" . org-roam-graph)
               ("C-c n i" . org-roam-node-insert)
               ("C-c n c" . org-roam-capture)
               ;; Dailies
               ("C-c n j" . org-roam-dailies-capture-today)
               :map org-mode-map
               ("C-M-i" . completion-at-point))
        :config
        (org-roam-setup))
#+end_src
** Size org roam buffer
#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.33)
               (window-height . fit-window-to-buffer)))
#+end_src
** Capture templates
#+begin_src emacs-lisp
  (require 'ucs-normalize)
  (setq org-roam-capture-templates
              '(("e" "empty" plain "%?"
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("a" "notes on a research article" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/Article.org")
                 :if-new (file+head "${citekey}.org" "#+title: ${citekey}\n")
                 :unnarrowed t)
                ("m" "notes on a method" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/Method.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("d" "definition or notes on a concept" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/Definition_Concept.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("g" "general category to link other notes" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/General_category.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("t" "notes on a textbook" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/Textbook.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("l" "notes on lecture (notes)" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/LectureNotes.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("p" "notes on a PhD manuscript" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/PhD.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("c" "notes on a conference" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/Conference.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)))
#+end_src

** Org-ref
#+begin_src emacs-lisp
  (use-package org-ref
    :ensure t
  )
  (setq org-ref-bibliography-notes "/home/amarie/BeepBoop/Org/ref_notes.org"
        org-ref-default-bibliography '("/home/amarie/References/References.bib")
        org-ref-pdf-directory "/home/amarie/References")
#+end_src
** Org-roam-bibtex
#+begin_src emacs-lisp
    ;; If you installed via MELPA
  (use-package org-roam-bibtex
    :after org-roam
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :bind (:map org-mode-map
                (("C-c n a" . orb-note-actions))))
  (setq orb-preformat-keywords '("citekey" "author" "year" "doi" "journal" "file"))
#+end_src
* Rust
** install
   #+begin_src emacs-lisp
     (use-package rust-mode
       :ensure t
       )        
   #+end_src
** rustic
   #+begin_src emacs-lisp
     (use-package rustic
       :ensure
       :bind (:map rustic-mode-map
                   ("M-j" . lsp-ui-imenu)
                   ("M-?" . lsp-find-references)
                   ("C-c C-c l" . flycheck-list-errors)
                   ("C-c C-c a" . lsp-execute-code-action)
                   ("C-c C-c r" . lsp-rename)
                   ("C-c C-c q" . lsp-workspace-restart)
                   ("C-c C-c Q" . lsp-workspace-shutdown)
                   ("C-c C-c s" . lsp-rust-analyzer-status))
       :config
       ;; uncomment for less flashiness
       ;; (setq lsp-eldoc-hook nil)
       ;; (setq lsp-enable-symbol-highlighting nil)
       ;; (setq lsp-signature-auto-activate nil)

       ;; comment to disable rustfmt on save
       (setq rustic-format-on-save t)
       (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

     (defun rk/rustic-mode-hook ()
       ;; so that run C-c C-c C-r works without having to confirm, but don't try to
       ;; save rust buffers that are not file visiting. Once
       ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
       ;; no longer be necessary.
       (when buffer-file-name
         (setq-local buffer-save-without-query t))
       (add-hook 'before-save-hook 'lsp-format-buffer nil t))
   #+end_src
** rust-analyzer
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :ensure
       :commands lsp
       :custom
       ;; what to use when checking on-save. "check" is default, I prefer clippy
       (lsp-rust-analyzer-cargo-watch-command "clippy")
       (lsp-eldoc-render-all t)
       (lsp-idle-delay 0.6)
       ;; enable / disable the hints as you prefer:
       (lsp-inlay-hint-enable t)
       ;; These are optional configurations. See https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/#lsp-rust-analyzer-display-chaining-hints for a full list
       (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
       (lsp-rust-analyzer-display-chaining-hints t)
       (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
       (lsp-rust-analyzer-display-closure-return-type-hints t)
       (lsp-rust-analyzer-display-parameter-hints nil)
       (lsp-rust-analyzer-display-reborrow-hints nil)
       :config
       (add-hook 'lsp-mode-hook 'lsp-ui-mode))

     (use-package lsp-ui
       :ensure
       :commands lsp-ui-mode
       :custom
       (lsp-ui-peek-always-show t)
       (lsp-ui-sideline-show-hover t)
       (lsp-ui-doc-enable nil))     
   #+end_src
** company
   #+begin_src emacs-lisp
     (use-package company
       :ensure
       :custom
       (company-idle-delay 0.5) ;; how long to wait until popup
       ;; (company-begin-commands nil) ;; uncomment to disable popup
       :bind
       (:map company-active-map
             ("C-n". company-select-next)
             ("C-p". company-select-previous)
             ("M-<". company-select-first)
             ("M->". company-select-last)))

     (use-package yasnippet
       :ensure
       :config
       (yas-reload-all)
       (add-hook 'prog-mode-hook 'yas-minor-mode)
       (add-hook 'text-mode-hook 'yas-minor-mode))

     (yas-global-mode 1)
   #+end_src
** indent
   #+begin_src emacs-lisp
     (add-hook 'rust-mode-hook
              (lambda () (setq indent-tabs-mode nil)))
   #+end_src
** rust formating
#+begin_src emacs-lisp
  (setq rust-format-on-save t)
#+end_src
* Python
#+begin_src emacs-lisp
    (use-package elpy
      :ensure t
      )
#+end_src
* Fortran
#+begin_src emacs-lisp
  (use-package f90
    :ensure t
    :mode ("\\.f90\\'" . f90-mode)
    :mode ("\\.irp.f\\'" . f90-mode)
    :init
    (setq fortran-minimum-statement-indent-fixed 2)
       )
   #+end_src
#+end_src
