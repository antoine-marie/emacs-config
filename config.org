#+TITLE: My emacs config
#+STARTUP: overview
* Intro
To create this config, I have mainly used this tutorial of [[https://www.youtube.com/watch?v=d6iY_1aMzeg&list=PLX2044Ew-UVVv31a0-Qn3dA6Sd_-NyA1n][Uncle Dave]].
I have also used pieces of other emacs config:
- [[https://github.com/daedreth/UncleDavesEmacs][https://github.com/daedreth/UncleDavesEmacs]]
- [[https://github.com/hieutkt/emacs-config][https://github.com/hieutkt/emacs-config]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][http://pages.sachachua.com/.emacs.d/Sacha.html]]
- https://github.com/daviwil/dotfiles/blob/master/Emacs.org

* Theme
Loading a nice looking theme
  #+begin_src emacs-lisp
    (use-package doom-themes
      :ensure t
      :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	    doom-themes-enable-italic t) ; if nil, italics is universally disabled
      (load-theme 'doom-molokai t)  ;;other cool themes doom-acario-dark doom-zenburn doom-gruvbox doom-snazzy doom-material

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))
  #+end_src

* Good looking emacs
** General looking
Setting some general parameters
  #+begin_src emacs-lisp
    (tool-bar-mode -1) ;; removing useless bars
    (menu-bar-mode -1) 
    (scroll-bar-mode -1)
    (toggle-frame-maximized)
    (global-display-line-numbers-mode t)
    (setq inhibit-startup-message 't)
    (setq org-hide-emphasis-markers nil) ;; to hide the *,=, or / markers
    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq
         split-width-threshold 0
         split-height-threshold nil) ;; vertical split by default
  #+end_src

  #+RESULTS:

** Remove the annoying beeps of emacs
  #+begin_src emacs-lisp
    (setq ring-bell-function 'ignore)
  #+end_src
** Smooth scrolling
  #+begin_src emacs-lisp
  (setq scroll-conservatively 100)
  #+end_src
** Highligh indent package
Highlight the indents in the prog and TeX modes.
   #+begin_src emacs-lisp
     (use-package highlight-indent-guides
	    :ensure t
	    :hook (prog-mode . highlight-indent-guides-mode)
	    (TeX-mode . highlight-indent-guides-mode))
     (setq highlight-indent-guides-method 'column)
   #+end_src
** Easy bracket parentheses etc 
*** Rainbow-delimiters package
Each pairs of delimiters have a given color to make it easier to recognize pairs.
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :hook (prog-mode . rainbow-delimiters-mode)
             (TeX-mode . rainbow-delimiters-mode))
   #+end_src
*** electric-pair mode
Minor mode to write the closing delimiters when typing an opening one.
   #+begin_src emacs-lisp
     (electric-pair-mode 1)
     (add-hook 'LaTeX-mode-hook
               '(lambda ()
                 (define-key LaTeX-mode-map (kbd "$") 'self-insert-command)))
   #+end_src
*** highlight matching bracket
Highlight the matching delimiters when the cursor is on one of them.
    #+begin_src emacs-lisp
      (show-paren-mode 1)
      (setq show-paren-style 'parenthesis)
    #+end_src
** UTF-8 encoding
#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
** PDF tools
Use pdf-tools to read pdf within emacs
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    ;; :config (pdf-tools-install)
    :hook (pdf-view-mode . (lambda () (display-line-numbers-mode -1) (pdf-sync-minor-mode 1))))
#+end_src

** Diminish
Remove all the minor mode in the bottom bar
#+begin_src emacs-lisp
      (use-package diminish
        :ensure t
        :init
        (diminish 'which-key-mode)
        (diminish 'visual-line-mode)
        (diminish 'beacon-mode)
        (diminish 'rainbow-delimiters-mode)
        (diminish 'flycheck-mode)
        (diminish 'ivy-mode)
        (diminish 'company-mode))
#+end_src
* User friendly emacs
** Backups
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src
** Config shortcut
#+begin_src emacs-lisp
   (global-set-key (kbd "C-c e") (lambda() (interactive)(find-file "~/.emacs.d/config.org")))
#+end_src
** Which-key package
Display all the possible commands if you forget the one that you want.
   #+begin_src emacs-lisp
     (use-package which-key
     :ensure t
     :init
     (which-key-mode))
   #+end_src
** Easily find cursor
*** Highlight cursor line
  #+begin_src emacs-lisp
    (when window-system (global-hl-line-mode t))
  #+end_src  
*** Flashing cursor line (beacon package)
Make the cursor's line flash when switching window or buffer.
   #+begin_src emacs-lisp
     (use-package beacon
       :ensure t
       :init
       (beacon-mode 1))
   #+end_src
** Company
Company provides auto-completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    :init
    (add-hook 'after-init-hook 'global-company-mode))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+end_src
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)
#+end_src
** popup kill ring
   #+begin_src emacs-lisp
     (use-package popup-kill-ring
       :ensure t
       :bind ("M-y" . popup-kill-ring))
   #+end_src  
** ivy package for auto-completion
   #+begin_src emacs-lisp
     (use-package counsel
       :ensure t
       :init (ivy-mode 1)
       :config
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       ;; enable this if you want `swiper' to use it
       ;; (setq search-default-mode #'char-fold-to-regexp)
       (global-set-key "\C-s" 'swiper)
       (global-set-key (kbd "C-c C-r") 'ivy-resume)
       (global-set-key (kbd "<f6>") 'ivy-resume)
       (global-set-key (kbd "M-x") 'counsel-M-x)
       (global-set-key (kbd "C-x C-f") 'counsel-find-file)
       (global-set-key (kbd "<f1> f") 'counsel-describe-function)
       (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
       (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
       (global-set-key (kbd "<f1> l") 'counsel-find-library)
       (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
       (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
       (global-set-key (kbd "C-c g") 'counsel-git)
       (global-set-key (kbd "C-c j") 'counsel-git-grep)
       (global-set-key (kbd "C-c k") 'counsel-ag)
       (global-set-key (kbd "C-x l") 'counsel-locate)
       (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
   #+end_src
** Avy package
Avy for fast moving to a character.

   #+begin_src emacs-lisp
     (use-package avy
     :ensure t)
     (global-set-key (kbd "C-:") 'avy-goto-char)
     (global-set-key (kbd "C-!") 'avy-goto-char-2)
   #+end_src

** recentf-mode
#+begin_src emacs-lisp
  (recentf-mode 1)
  (global-set-key (kbd "C-x r") 'recentf-open-files)
#+end_src
** saveplace mode
#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src
** auto-revert mode
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src
** buffer when opening emacs
#+begin_src emacs-lisp
  (defun my-setup-initial-window-setup ()
    "Do what I want for initial window setup.
  In my case I want to start with 2 windows split side by side."
    (interactive)
    (switch-to-buffer (find-file "~/BeepBoop/Org/todo.org"))
    (split-window-horizontally)
    (other-window 1)
    (switch-to-buffer (org-agenda nil "a")))

  (add-hook 'emacs-startup-hook #'my-setup-initial-window-setup)
#+end_src
* Org mode
** General looking
*** Org bullets
   #+begin_src emacs-lisp
     (use-package org-bullets
       :ensure t
       :hook (org-mode . (lambda () (org-bullets-mode))))
   #+end_src
*** Indent mode
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook 'org-indent-mode)
    #+end_src
*** Do not show markers for italics, bold etc
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src
*** ... -> Drop down character
#+begin_src emacs-lisp
  (setq org-ellipsis " â–¾")
#+end_src
*** Font size of different headers
#+begin_src emacs-lisp
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1))))
#+end_src
** Fuzzy for link to file
#+begin_src emacs-lisp
  (setq org-link-search-must-match-exact-headline nil)
#+end_src
** Visual line mode
   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
   #+end_src

   #+RESULTS:
   
** Agenda
*** set agenda key
   #+begin_src emacs-lisp
      (global-set-key (kbd "C-c a") 'org-agenda)
   #+end_src
*** set agenda files
    #+begin_src emacs-lisp
      (setq org-agenda-files '("/home/amarie/BeepBoop/Org/todo.org"
                               "/home/amarie/BeepBoop/Org/work.org"
                               "/home/amarie/BeepBoop/Org/anniv.org"
                               "/home/amarie/BeepBoop/Org/livres.org"))
    #+end_src
*** compact agenda
#+begin_src emacs-lisp
  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)
  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)
#+end_src
*** start agenda from today
#+begin_src emacs-lisp
  (setq org-agenda-span 10
        org-agenda-start-on-weekday nil
        org-agenda-start-day "-0d")
#+end_src
*** org-habit
#+begin_src emacs-lisp
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 40)
#+end_src

** Key binding for todo.org
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c t") (lambda() (interactive)(find-file "~/BeepBoop/Org/todo.org")))
  (global-set-key (kbd "C-c w") (lambda() (interactive)(find-file "~/BeepBoop/Org/work.org")))
#+end_src
** Org TODO keywords and priorities
   #+begin_src emacs-lisp
     (setq org-todo-keywords
	   '(
	     (sequence "IDEA(i)" "TODO(t)" "WAITING(w)" "MEETING(m)" "|" "DONE(d)")
	     (sequence "|" "CANCELED(c)" "SOMEDAY(f)")
	     ))
     (setq org-highest-priority ?A)
	  (setq org-lowest-priority ?C)
	  (setq org-default-priority ?A)
	  (setq org-priority-faces '((?A . (:foreground "red" :weight bold))
				     (?B . (:foreground "orange" :weight bold))
				     (?C . (:foreground "yellow" :weight bold))))
   #+end_src

** TODO Org capture template
*** set key template
    #+begin_src emacs-lisp
      (define-key global-map (kbd "C-c c") 'org-capture)
    #+end_src
*** todo template
    #+begin_src emacs-lisp
      (setq org-capture-templates
            '(("t" "todo" entry (file+headline "~/BeepBoop/Org/todo.org" "Tasks")
               "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n"  :prepend t :kill-buffer t)))
    #+end_src

*** idea template
    #+begin_src emacs-lisp
      (setq org-capture-templates
            '(("i" "Idea" entry (file+headline "~/BeepBoop/Org/todo.org" "Task")
               "* IDEA %?\nAdded: %U\n" :prepend t :kill-buffer t)))
    #+end_src
    
** Org structure template
#+begin_src emacs-lisp
  (setq org-structure-template-alist
    '(("a" . "export ascii\n")
      ("c" . "center\n")
      ("C" . "comment\n")
      ("e" . "example\n")
      ("E" . "export")
      ("h" . "export html\n")
      ("l" . "export latex\n")
      ("q" . "quote\n")
      ("s" . "src")
      ("v" . "verse\n")
      ("el" . "src emacs-lisp\n"))) 
#+end_src

** Org tags list
#+begin_src emacs-lisp
  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("agenda" . ?a)
       ("planning" . ?p)
       ("email" . ?e)
       ("idea" . ?i)))
#+end_src
** TODO org-wild-notifier for notifications for agenda 
** Host local server with simple-httpd
#+begin_src emacs-lisp
  (use-package simple-httpd
    :ensure t)
#+end_src
* AucTeX
** install
   #+begin_src emacs-lisp
     (use-package auctex
       :ensure t
       :mode ("\\.tex\\'" . TeX-latex-mode)
       :config
       ;; General configs
       (setq TeX-master		 nil
             TeX-auto-save		 t
             TeX-parse-self		 t
             TeX-PDF-mode		 t
             TeX-electric-escape	 t)
       )        
   #+end_src
** auctex-latexmk
   #+begin_src emacs-lisp
     (use-package auctex-latexmk
       :ensure t
       :init
       (auctex-latexmk-setup)
       :config
       (setq auctex-latexmk-inherit-TeX-PDF-mode t)
       )
   #+end_src

** PDF updated and open in Evince EE
   #+begin_src emacs-lisp
     ;; to use pdfview with auctex
     (setq TeX-view-program-selection '((output-pdf "Evince"))
     TeX-source-correlate-start-server t) ;; not sure if last line is neccessary
     ;; to have the buffer refresh after compilation
     (add-hook 'TeX-after-compilation-finished-functions
	 #'TeX-revert-document-buffer)
     ;;correlate
     (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
   #+end_src
** flyspell
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'flyspell-mode) 
#+end_src
** reftex
#+begin_src emacs-lisp
     (use-package reftex
       :ensure t
       :config
       (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
       ;; Reftex default bibfile
       ;;(setq reftex-default-bibliography "~/Stage_M2/ESVCC/VpCCD/VpCCD.bib")
       ;; Activate nice interface between RefTeX and AUCTeX
       (setq reftex-plug-into-AUCTeX t)
       )        
   #+end_src
* Magit
Great tutorial to learn the very basics of [[https://www.youtube.com/watch?v=vQO7F2Q9DwA][magit]]. A more advanced series of tutorial on [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oMc34dTjyFmTUWbXTKrNfZA][magit]].
** Magit package
Magit is a git porcelain for emacs.
Reference card for [[https://magit.vc/manual/magit-refcard.pdf][magit]].
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status)
    :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src
* Org roam
I learned how to use org roam thanks to the following [[https://www.youtube.com/watch?v=AyhPmypHDEw&list=PLEoMzSkcN8oN3x3XaZQ-AXFKv52LZzjqD][series of tutorial]].
There is also a complete tutorial on how to install the minimum configuration for org-roam-bibtex [[https://org-roam.discourse.group/t/minimum-configuration-of-org-roam-v2-org-roam-bibtex-for-spacemacs-users/1755][here]].
** Load package
#+begin_src emacs-lisp
      (use-package org-roam
        :ensure t
        :init
        (setq org-roam-v2-ack t)
        (setq org-roam-completion-everywhere t)
        :custom
        (org-roam-directory "~/BeepBoop/OrgRoam")
        :bind (("C-c n l" . org-roam-buffer-toggle)
               ("C-c n f" . org-roam-node-find)
               ("C-c n g" . org-roam-graph)
               ("C-c n i" . org-roam-node-insert)
               ("C-c n c" . org-roam-capture)
               ;; Dailies
               ("C-c n j" . org-roam-dailies-capture-today)
               :map org-mode-map
               ("C-M-i" . completion-at-point))
        :config
        (org-roam-setup))
#+end_src
** Size org roam buffer
#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.33)
               (window-height . fit-window-to-buffer)))
#+end_src
** Capture templates
#+begin_src emacs-lisp
  (require 'ucs-normalize)
  (setq org-roam-capture-templates
              '(("e" "empty" plain "%?"
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("a" "notes on a research article" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/Article.org")
                 :if-new (file+head "${citekey}.org" "#+title: ${citekey}\n")
                 :unnarrowed t)
                ("m" "notes on a method" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/Method.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("d" "definition or notes on a concept" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/Definition_Concept.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("g" "general category to link other notes" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/General_category.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("t" "notes on a textbook" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/Textbook.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("l" "notes on lecture (notes)" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/LectureNotes.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("p" "notes on a PhD manuscript" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/PhD.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)
                ("c" "notes on a conference" plain
                 (file "/home/amarie/BeepBoop/OrgRoam/Templates/Conference.org")
                 :if-new (file+head "${slug}.org" "#+title: ${title}\n")
                 :unnarrowed t)))
#+end_src

** TODO [#C] Advanced configuration ivy-bibtex
https://github.com/tmalsburg/helm-bibtex
   #+begin_src emacs-lisp
     (use-package ivy-bibtex
       :ensure t
       )
     (setq bibtex-completion-bibliography
           '("/home/amarie/References/References.bib")
           bibtex-completion-notes-path "/home/amarie/BeepBoop/Org/bibtex_notes.org"
           bibtex-completion-library-path '("/home/amarie/References")
           bibtex-completion-pdf-field "file")
     (setq ivy-bibtex-default-action 'ivy-bibtex-insert-citation)
   #+end_src
** Org-ref
#+begin_src emacs-lisp
  (use-package org-ref
    :ensure t
  )
  (setq org-ref-bibliography-notes "/home/amarie/BeepBoop/Org/ref_notes.org"
        org-ref-default-bibliography '("/home/amarie/References/References.bib")
        org-ref-pdf-directory "/home/amarie/References")
#+end_src
** Org-roam-bibtex
#+begin_src emacs-lisp
    ;; If you installed via MELPA
  (use-package org-roam-bibtex
    :after org-roam
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :bind (:map org-mode-map
                (("C-c n a" . orb-note-actions))))
  (setq orb-preformat-keywords '("citekey" "author" "year" "doi" "journal" "file"))
#+end_src
